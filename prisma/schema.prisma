// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
//   output   = "../lib/generated/prisma"
// }
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkUserId     String           @unique //Clerk user id
  email           String           @unique
  name            String?
  imageUrl        String?
  industry        String? //combined industry-subindustry(e.g.,"tech-software-development")
  industryInsight IndustryInsight? @relation(fields: [industry], references: [industry])
  //Profile fields
  bio             String?
  experience      Int? //Years of experience
  skills          String[] //Array of skills
  assessments     Assessment[]
  resume          Resume?
  coverLetter     CoverLetter[]
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float //Overall quiz score 
  questions      Json[] //Array of {question,answer,userAnser,isCorrect}
  category       String //"Technical", "Behavioral", etc.
  improvementTip String? //Ai generated improvement tip 
  careatedAt     DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique //one resume per user
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text
  atsScore  Float?
  feedback  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  content        String //Markdown content
  jobDescription String?
  companyName    String //Name of the company applying to
  jobTitle       String //position applying for
  careatedAt     DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsight {
  id       String @id @default(cuid())
  industry String @unique //The industry this data belongs to (e.g.,"Tech-software-development")

  //User in this industry
  users        User[]
  //Salary Data
  salaryRanges Json[] //Array of{role:string,min:float,max:float,median:float,location:string?}
  //Industry Trends
  growthRate   Float //Industry Growth rate

  demandLevel DemandLevel //"High","Medium","Low"

  topSkills String[] //Most in-demand skills

  //Market Conditions
  marketOutlook MarketOutlook //"Positive","Neutral","Negative"
  keyTrends     String[] //Array of current industry trends

  //Learning suggestions
  recommendedSkills String[] // Corrected from recommendedSKills to recommendedSkills

  lastUpdated DateTime @default(now())
  nextUpdate  DateTime //Scheduled Update time

  @@index([industry])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}






